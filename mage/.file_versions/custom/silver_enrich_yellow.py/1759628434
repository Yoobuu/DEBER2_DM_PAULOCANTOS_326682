if 'custom' not in globals():
    from mage_ai.data_preparation.decorators import custom
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test

from mage_ai.data_preparation.shared.secrets import get_secret_value
import snowflake.connector

@custom
def transform_custom(*args, **kwargs):
    """
    Crea/actualiza la vista SILVER.TRIPS_YELLOW_ENRICHED uniendo con DIM_ZONE:
      - PULocationID -> pickup_zone/borough
      - DOLocationID -> dropoff_zone/borough
      - service_type = 'yellow'
    Idempotente (CREATE OR REPLACE VIEW).
    También valida conteo por mes (vars) contra TRIPS_YELLOW base.
    """
    # Variables (solo para la verificación de conteo)
    pr = kwargs.get('pipeline_runtime') or {}
    v = pr.get('variables', {})
    year = int(v.get('year', 2019))
    month = int(v.get('month', 1))
    mm = f'{month:02d}'
    print(f"➡️ Vars verificación: year={year} month={month} mm={mm}")

    # Secrets
    user = get_secret_value('SNOWFLAKE_USER')
    password = get_secret_value('SNOWFLAKE_PASSWORD')
    account = get_secret_value('SNOWFLAKE_ACCOUNT')
    role = get_secret_value('SNOWFLAKE_ROLE')
    warehouse = get_secret_value('SNOWFLAKE_WAREHOUSE')
    database = get_secret_value('SNOWFLAKE_DB')
    schema_silver = get_secret_value('SNOWFLAKE_SCHEMA_SILVER')

    conn = snowflake.connector.connect(
        user=user,
        password=password,
        account=account,
        role=role,
        warehouse=warehouse,
        database=database,
        schema=schema_silver,
        client_session_keep_alive=True,
        login_timeout=30,
        authenticator='snowflake',
    )
    cur = conn.cursor()
    try:
        cur.execute(f"USE ROLE {role}")
        cur.execute(f"USE WAREHOUSE {warehouse}")
        cur.execute(f"USE DATABASE {database}")
        cur.execute(f"USE SCHEMA {schema_silver}")
        cur.execute("ALTER SESSION SET STATEMENT_TIMEOUT_IN_SECONDS = 600")

        print("▶ Creando/actualizando vista SILVER.TRIPS_YELLOW_ENRICHED ...")
        cur.execute(f"""
        CREATE OR REPLACE VIEW {database}.{schema_silver}.TRIPS_YELLOW_ENRICHED AS
        SELECT
            y.*,
            'yellow' AS service_type,
            zpu.zone_name   AS pickup_zone,
            zpu.borough     AS pickup_borough,
            zdo.zone_name   AS dropoff_zone,
            zdo.borough     AS dropoff_borough
        FROM {database}.{schema_silver}.TRIPS_YELLOW y
        LEFT JOIN {database}.{schema_silver}.DIM_ZONE zpu
               ON zpu.zone_id = y.PULocationID
        LEFT JOIN {database}.{schema_silver}.DIM_ZONE zdo
               ON zdo.zone_id = y.DOLocationID;
        """)

        print("✅ Vista creada/actualizada.")

        # Verificación: conteo del mes en base vs vista
        cur.execute(f"""
            SELECT COUNT(*) FROM {database}.{schema_silver}.TRIPS_YELLOW
            WHERE trip_year={year} AND trip_month={month};
        """)
        base_cnt = cur.fetchone()[0]

        cur.execute(f"""
            SELECT COUNT(*) FROM {database}.{schema_silver}.TRIPS_YELLOW_ENRICHED
            WHERE trip_year={year} AND trip_month={month};
        """)
        view_cnt = cur.fetchone()[0]

        print(f"📊 Verificación {year}-{mm}: base={base_cnt} vs enriched={view_cnt}")
        return {"base_count": base_cnt, "enriched_count": view_cnt}

    finally:
        try:
            cur.close()
            conn.close()
        except Exception:
            pass

@test
def test_output(output, *args) -> None:
    assert output is not None
    assert output.get("enriched_count", 0) >= 0
