if 'custom' not in globals():
    from mage_ai.data_preparation.decorators import custom
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test

from mage_ai.data_preparation.shared.secrets import get_secret_value
import snowflake.connector

@custom
def transform_custom(*args, **kwargs):
    """
    Crea/actualiza la vista SILVER.TRIPS_YELLOW_ENRICHED uniendo con DIM_ZONE:
      - pickup y dropoff zones a partir de las columnas reales presentes en TRIPS_YELLOW
      - agrega service_type='yellow'
    Detecta si las columnas se llaman PULOCATIONID/DOLOCATIONID o PU_LOCATION_ID/DO_LOCATION_ID.
    """

    # Variables (solo para verificaci√≥n de conteo)
    pr = kwargs.get('pipeline_runtime') or {}
    v = pr.get('variables', {})
    year = int(v.get('year', 2019))
    month = int(v.get('month', 1))
    mm = f'{month:02d}'
    print(f"‚û°Ô∏è Vars verificaci√≥n: year={year} month={month} mm={mm}")

    # Secrets
    user = get_secret_value('SNOWFLAKE_USER')
    password = get_secret_value('SNOWFLAKE_PASSWORD')
    account = get_secret_value('SNOWFLAKE_ACCOUNT')
    role = get_secret_value('SNOWFLAKE_ROLE')
    warehouse = get_secret_value('SNOWFLAKE_WAREHOUSE')
    database = get_secret_value('SNOWFLAKE_DB')
    schema_silver = get_secret_value('SNOWFLAKE_SCHEMA_SILVER')

    conn = snowflake.connector.connect(
        user=user,
        password=password,
        account=account,
        role=role,
        warehouse=warehouse,
        database=database,
        schema=schema_silver,
        client_session_keep_alive=True,
        login_timeout=30,
        authenticator='snowflake',
    )
    cur = conn.cursor()
    try:
        cur.execute(f"USE ROLE {role}")
        cur.execute(f"USE WAREHOUSE {warehouse}")
        cur.execute(f"USE DATABASE {database}")
        cur.execute(f"USE SCHEMA {schema_silver}")
        cur.execute("ALTER SESSION SET STATEMENT_TIMEOUT_IN_SECONDS = 600")

        # --- Detectar nombres reales de columnas de zona en SILVER.TRIPS_YELLOW ---
        cur.execute(f"""
            SELECT COLUMN_NAME
            FROM {database}.INFORMATION_SCHEMA.COLUMNS
            WHERE TABLE_SCHEMA = %s
              AND TABLE_NAME = 'TRIPS_YELLOW'
        """, (schema_silver,))
        cols = [r[0] for r in cur.fetchall()]
        cols_upper = {c.upper(): c for c in cols}  # mapa UPPER -> nombre exacto

        # Candidatos posibles
        pu_candidates = ['PULOCATIONID', 'PU_LOCATION_ID']
        do_candidates = ['DOLOCATIONID', 'DO_LOCATION_ID']

        if any(c in cols_upper for c in pu_candidates):
            pu_col_exact = cols_upper[[c for c in pu_candidates if c in cols_upper][0]]
        else:
            raise Exception("No se encontr√≥ columna de pickup location en TRIPS_YELLOW (PULocationID o PU_LOCATION_ID).")

        if any(c in cols_upper for c in do_candidates):
            do_col_exact = cols_upper[[c for c in do_candidates if c in cols_upper][0]]
        else:
            raise Exception("No se encontr√≥ columna de dropoff location en TRIPS_YELLOW (DOLocationID o DO_LOCATION_ID).")

        print(f"üîé Columnas detectadas: PU='{pu_col_exact}', DO='{do_col_exact}'")

        # Armar SQL citando los nombres exactos (comillas) para evitar problemas de case
        create_view_sql = f"""
        CREATE OR REPLACE VIEW {database}.{schema_silver}.TRIPS_YELLOW_ENRICHED AS
        SELECT
            y.*,
            'yellow' AS service_type,
            zpu.zone_name   AS pickup_zone,
            zpu.borough     AS pickup_borough,
            zdo.zone_name   AS dropoff_zone,
            zdo.borough     AS dropoff_borough
        FROM {database}.{schema_silver}.TRIPS_YELLOW y
        LEFT JOIN {database}.{schema_silver}.DIM_ZONE zpu
               ON zpu.zone_id = y."{pu_col_exact}"
        LEFT JOIN {database}.{schema_silver}.DIM_ZONE zdo
               ON zdo.zone_id = y."{do_col_exact}";
        """

        print("‚ñ∂ Creando/actualizando vista SILVER.TRIPS_YELLOW_ENRICHED ...")
        cur.execute(create_view_sql)
        print("‚úÖ Vista creada/actualizada.")

        # Verificaci√≥n: conteo del mes en base vs vista
        cur.execute(f"""
            SELECT COUNT(*) FROM {database}.{schema_silver}.TRIPS_YELLOW
            WHERE trip_year={year} AND trip_month={month};
        """)
        base_cnt = cur.fetchone()[0]

        cur.execute(f"""
            SELECT COUNT(*) FROM {database}.{schema_silver}.TRIPS_YELLOW_ENRICHED
            WHERE trip_year={year} AND trip_month={month};
        """)
        view_cnt = cur.fetchone()[0]

        print(f"üìä Verificaci√≥n {year}-{mm}: base={base_cnt} vs enriched={view_cnt}")
        return {"base_count": base_cnt, "enriched_count": view_cnt}

    finally:
        try:
            cur.close()
            conn.close()
        except Exception:
            pass

@test
def test_output(output, *args) -> None:
    assert output is not None
    # no forzamos igualdad aqu√≠ por si variables apuntan a un mes a√∫n no cargado
