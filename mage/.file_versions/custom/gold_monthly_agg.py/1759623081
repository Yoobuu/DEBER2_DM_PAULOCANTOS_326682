if 'custom' not in globals():
    from mage_ai.data_preparation.decorators import custom
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test

from mage_ai.data_preparation.shared.secrets import get_secret_value
import snowflake.connector

@custom
def transform_custom(*args, **kwargs):
    """
    Agrega m√©tricas mensuales desde SILVER.TRIPS_YELLOW hacia GOLD.TRIPS_YELLOW_MONTHLY
    usando variables service/year/month (service no se usa a√∫n porque esta tabla es de YELLOW).
    """
    # --- fallback manual para ejecuci√≥n local ---
    if not kwargs.get('pipeline_runtime'):
        kwargs['pipeline_runtime'] = {
            'variables': {
                'service': 'yellow',
                'year': 2019,
                'month': 2,
            }
        }
    # -------------------------------------------
    pr = kwargs.get('pipeline_runtime') or {}
    service = pr.get('variables', {}).get('service', 'yellow')
    year = int(pr.get('variables', {}).get('year', 2019))
    month = int(pr.get('variables', {}).get('month', 1))
    mm = f'{month:02d}'
    print(f"‚û°Ô∏è Vars: service={service} year={year} month={month} mm={mm}")

    # Secrets
    user = get_secret_value('SNOWFLAKE_USER')
    password = get_secret_value('SNOWFLAKE_PASSWORD')
    account = get_secret_value('SNOWFLAKE_ACCOUNT')
    role = get_secret_value('SNOWFLAKE_ROLE')            # ROLE_DM_SVC
    warehouse = get_secret_value('SNOWFLAKE_WAREHOUSE')
    database = get_secret_value('SNOWFLAKE_DB')
    schema_silver = get_secret_value('SNOWFLAKE_SCHEMA_SILVER')
    schema_gold = get_secret_value('SNOWFLAKE_SCHEMA_GOLD')

    conn = snowflake.connector.connect(
        user=user,
        password=password,
        account=account,
        role=role,
        warehouse=warehouse,
        database=database,
        schema=schema_gold,
        client_session_keep_alive=True,
        login_timeout=30,
        authenticator='snowflake',
    )
    cur = conn.cursor()
    try:
        cur.execute(f"USE ROLE {role}")
        cur.execute(f"USE WAREHOUSE {warehouse}")
        cur.execute(f"USE DATABASE {database}")
        cur.execute(f"USE SCHEMA {schema_gold}")
        cur.execute("ALTER SESSION SET STATEMENT_TIMEOUT_IN_SECONDS = 600")

        # 1) Crear tabla GOLD si no existe
        print("‚ñ∂ Creando tabla GOLD.TRIPS_YELLOW_MONTHLY (si no existe)...")
        create_tbl = f"""
        CREATE TABLE IF NOT EXISTS {database}.{schema_gold}.TRIPS_YELLOW_MONTHLY (
            trip_year            INT,
            trip_month           INT,
            rides                BIGINT,
            total_distance_miles FLOAT,
            revenue              NUMERIC(18,2),
            tips                 NUMERIC(18,2),
            avg_total_amount     NUMERIC(18,2),
            created_at           TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
        );
        """
        cur.execute(create_tbl)

        # 2) Idempotencia: borrar el mes previo
        print("‚ñ∂ Borrando datos previos del mes (idempotencia)...")
        delete_sql = f"""
        DELETE FROM {database}.{schema_gold}.TRIPS_YELLOW_MONTHLY
        WHERE trip_year = {year} AND trip_month = {month};
        """
        cur.execute(delete_sql)

        # 3) Insertar m√©trica mensual desde SILVER
        print(f"‚ñ∂ Insertando m√©tricas {year}-{mm} desde SILVER.TRIPS_YELLOW ...")
        insert_sql = f"""
        INSERT INTO {database}.{schema_gold}.TRIPS_YELLOW_MONTHLY
            (trip_year, trip_month, rides, total_distance_miles, revenue, tips, avg_total_amount)
        SELECT
            {year} AS trip_year,
            {month} AS trip_month,
            COUNT(*) AS rides,
            COALESCE(SUM(trip_distance), 0) AS total_distance_miles,
            COALESCE(SUM(total_amount), 0)   AS revenue,
            COALESCE(SUM(tip_amount), 0)     AS tips,
            COALESCE(AVG(total_amount), 0)   AS avg_total_amount
        FROM {database}.{schema_silver}.TRIPS_YELLOW
        WHERE trip_year = {year} AND trip_month = {month};
        """
        cur.execute(insert_sql)

        # 4) Verificar fila GOLD
        check_sql = f"""
        SELECT *
        FROM {database}.{schema_gold}.TRIPS_YELLOW_MONTHLY
        WHERE trip_year = {year} AND trip_month = {month};
        """
        cur.execute(check_sql)
        row = cur.fetchone()
        print("üìä GOLD:", row)

        print("‚úÖ GOLD mensual generado/actualizado.")
        return {"gold_row": row}

    finally:
        try:
            cur.close()
            conn.close()
        except Exception:
            pass

@test
def test_output(output, *args) -> None:
    assert output is not None, "No hubo output."
    assert output.get("gold_row") is not None, "No se gener√≥ la fila GOLD para el mes indicado."
