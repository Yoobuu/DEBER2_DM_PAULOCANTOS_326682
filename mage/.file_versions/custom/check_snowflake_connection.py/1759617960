# Estos 2 if son parte del template por defecto de Mage; d√©jalos tal cual
if 'custom' not in globals():
    from mage_ai.data_preparation.decorators import custom
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test

from mage_ai.data_preparation.shared.secrets import get_secret_value
import snowflake.connector

@custom
def transform_custom(*args, **kwargs):
    """
    Conecta a Snowflake usando Secrets de Mage y devuelve info b√°sica.
    """

    print("üîç Intentando conectar con Snowflake...")

    # Lee tus Secrets guardados en el pipeline (UI de Mage ‚Üí Secrets)
    user = get_secret_value('SNOWFLAKE_USER')
    password = get_secret_value('SNOWFLAKE_PASSWORD')
    account = get_secret_value('SNOWFLAKE_ACCOUNT')
    role = get_secret_value('SNOWFLAKE_ROLE')
    warehouse = get_secret_value('SNOWFLAKE_WAREHOUSE')
    database = get_secret_value('SNOWFLAKE_DB')
    schema = get_secret_value('SNOWFLAKE_SCHEMA_BRONZE')  # trabajaremos sobre BRONZE

    conn = None
    cur = None
    try:
        conn = snowflake.connector.connect(
            user=user,
            password=password,
            account=account,      # ej: xpc24435.us-east-1
            role=role,
            warehouse=warehouse,
            database=database,
            schema=schema,
        )
        cur = conn.cursor()
        cur.execute("SELECT CURRENT_VERSION(), CURRENT_ROLE(), CURRENT_DATABASE(), CURRENT_SCHEMA();")
        v, r, d, s = cur.fetchone()

        print("‚úÖ Conexi√≥n exitosa a Snowflake!")
        print(f"Versi√≥n: {v}")
        print(f"Rol actual: {r}")
        print(f"Base de datos: {d}")
        print(f"Esquema: {s}")

        # Devuelve un diccionario (para que quede registro estructurado en Mage)
        return {'version': v, 'role': r, 'database': d, 'schema': s}

    except Exception as e:
        print("‚ùå Error al conectar a Snowflake:")
        print(e)
        # Propaga el error para que el run quede en rojo y podamos ver el stacktrace
        raise

    finally:
        try:
            if cur is not None:
                cur.close()
            if conn is not None:
                conn.close()
        except Exception:
            pass


@test
def test_output(output, *args) -> None:
    """
    Verifica que devolvimos algo (simple).
    """
    assert output is not None, 'El output es None; la conexi√≥n no devolvi√≥ datos.'
